/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import { useEffect, useRef, useState } from 'react';
import { animated, useSpring } from '@react-spring/three';
import { useGLTF } from '@react-three/drei';
import { useFrame, useThree } from '@react-three/fiber';
import { useTheme } from 'next-themes';

export function DarkModeToggle(props: { scale: number }) {
  const { width, height } = useThree((state) => state.viewport);
  //@ts-ignore
  const { nodes: nodesSun, materials: materialsSun } = useGLTF('/models/sun.glb');
  //@ts-ignore
  const { nodes: nodesMoon, materials: materialsMoon } = useGLTF('/models/moon.glb');
  const ref = useRef<any>();
  const [hovered, setHovered] = useState(false);
  const { theme, setTheme } = useTheme();

  useEffect(() => {
    document.body.style.cursor = hovered ? 'pointer' : 'auto';
  }, [hovered]);

  const { scale } = useSpring({
    scale: props.scale * (hovered ? 1.1 : 1),
  });

  useFrame(() => {
    if (hovered) {
      ref.current.rotation.y += 0.015;
    } else {
      ref.current.rotation.y += 0.005;
    }
  });

  return (
    <animated.group
      ref={ref}
      {...props}
      scale={scale}
      position={[width / 2 - 1, height / 2 - 1, 0]}
      dispose={null}
      onPointerOver={() => setHovered(true)}
      onPointerOut={() => setHovered(false)}
      onClick={() => {
        setTheme(theme === 'light' ? 'dark' : 'light');
      }}
    >
      <mesh
        castShadow
        receiveShadow
        geometry={nodesMoon.Cube008.geometry}
        material={materialsMoon['Default OBJ.005']}
        visible={theme === 'dark'}
      />

      <mesh
        castShadow
        receiveShadow
        geometry={nodesSun.Cube001.geometry}
        material={materialsSun.None}
        rotation={[Math.PI / 2, 0, 0]}
        scale={1000}
        visible={theme === 'light'}
      />
    </animated.group>
  );
}

useGLTF.preload('/models/moon.glb');
