/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import { useEffect, useRef, useState } from 'react';
import { animated, useSpring } from '@react-spring/three';
import { useTexture } from '@react-three/drei';
import { useFrame, useThree } from '@react-three/fiber';
import { useTheme } from 'next-themes';
import { BufferGeometry, Material, Mesh, sRGBEncoding } from 'three';

export function DarkModeToggle() {
  const { width } = useThree((state) => state.size);
  const { width: vw, height: vh } = useThree((state) => state.viewport);
  const [moonTexture, sunTexture] = useTexture(['/models/moon.jpeg', '/models/sun.jpeg']);
  moonTexture.encoding = sunTexture.encoding = sRGBEncoding;

  const ref = useRef<Mesh<BufferGeometry, Material | Material[]>>(null);
  const [hovered, setHovered] = useState(false);
  const { theme, setTheme } = useTheme();

  useEffect(() => {
    document.body.style.cursor = hovered ? 'pointer' : 'auto';
  }, [hovered]);

  const { scale } = useSpring({
    scale: hovered ? 1.1 : 1,
  });

  useFrame(() => {
    if (hovered) {
      ref.current!.rotation.y += 0.015;
    } else {
      ref.current!.rotation.y += 0.005;
    }
  });

  return (
    <animated.mesh
      ref={ref}
      scale={scale}
      position={[vw / 2 - 3.75, vh / 2 - 3.75, 0]}
      dispose={null}
      onPointerOver={() => setHovered(true)}
      onPointerOut={() => setHovered(false)}
      onClick={() => {
        setTheme(theme === 'light' ? 'dark' : 'light');
      }}
    >
      <sphereGeometry args={[1.35 * (width > 1024 ? 1.5 : 1), 32, 32]} />
      <meshStandardMaterial map={theme === 'light' ? sunTexture : moonTexture} />
    </animated.mesh>
  );
}

useTexture.preload('/models/moon.jpeg');
useTexture.preload('/models/sun.jpeg');
